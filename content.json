{"meta":{"title":"Sephiroth1s'blog","subtitle":"Sephiroth1s","description":"The quieter you became,the more you are able to hear.","author":"Sephiroth1s","url":"https://sephiroth1s.top","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-10-04T12:17:34.591Z","updated":"2020-10-04T12:17:34.591Z","comments":true,"path":"404.html","permalink":"https://sephiroth1s.top/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2020-10-08T16:03:19.745Z","updated":"2020-10-08T16:03:19.745Z","comments":true,"path":"about/index.html","permalink":"https://sephiroth1s.top/about/index.html","excerpt":"","text":"什么都想学点的电子汪主业单片机相关（裸机开发），副业写写桌面软件，争取早日转型2333"},{"title":"所有分类","date":"2020-10-04T08:43:05.278Z","updated":"2020-10-04T08:43:05.278Z","comments":true,"path":"categories/index.html","permalink":"https://sephiroth1s.top/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-10-08T16:00:46.722Z","updated":"2020-10-08T16:00:46.722Z","comments":true,"path":"friends/index.html","permalink":"https://sephiroth1s.top/friends/index.html","excerpt":"展示卡片文字颜色和背景根据链接到的博客直接拿取色器取色的（懒），有需求请留言时备注。","text":"展示卡片文字颜色和背景根据链接到的博客直接拿取色器取色的（懒），有需求请留言时备注。 需要添加友链的可以根据以下规范在评论区回复，也可以直接留下关键的，名字、链接、头像。 1234567name: 测试名 # 博客名avatar: # 头像链接url: # 博客链接backgroundColor: &#39;#3E74C9&#39; # 卡片背景颜色textColor: &#39;#fff&#39; # 卡片文字颜色tags: [标签1, 标签2] # 标签desc: # 描述文字"},{"title":"所有标签","date":"2020-10-04T07:02:45.190Z","updated":"2020-10-04T07:02:45.190Z","comments":true,"path":"tags/index.html","permalink":"https://sephiroth1s.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"关于valine的一些吐槽","slug":"关于valine的一些吐槽/关于valine的一些吐槽","date":"2020-10-11T16:00:00.000Z","updated":"2021-01-26T13:32:40.361Z","comments":true,"path":"2020-10-12-about-valine/","link":"","permalink":"https://sephiroth1s.top/2020-10-12-about-valine/","excerpt":"","text":"前言好久不更新博客，终于闲下心来给博客换个主题，主要是发现旧博客存档重装系统没了，配置教程的网址也凉凉了，看下更新时间两年前，所以决定换了 评论系统新主题内置了valine ，所以想着直接把原来的appid之类的粘贴过来就好了，然而发现评论框一直在转圈没办法评论，直到我打开首页发现这个 这就很尴尬了，简单上网搜了下有以下两种解决方案 使用valine-admin使用valine-admin参考链接 这里已经写的很详细了， 有一点倒是蛮有趣的，我的旧博客主题倒是可以正常使用原来的appid 对应的应用（白名单已经放行localhost:4000）。 不过我还是推荐下面的方法。简单直接一点 使用国际版信息来源链接，国际版不需要实名制，需要绑定手机号，可以使用Google voice，记得+1 然后接电话号码。可以自定义后台管理域名，国内版则必须实名制才能使用。 吐槽https://leancloud.cn/ 被停止解析我好像是当时咕咕咕的时候，看到过邮件有点印象， leancloud 被这么搞过之后肯定只能老老实实听话了，所以不能怪他，毕竟.cn 域名都有这个风险。举个例子即使淘宝也不用.cn域名，所以懂了吧2333。 博客当前正在使用的当年年少无知弄的.cn域名，可惜啊，没想到cn域名只是我从地主租来的地带霸王条款的那种，最近在想替代方案，查过资料，cn域名这种即使你跨国层层阻挠拖延成功转移，实际上也是没有屌用的，还是会有停止解析的风险。 所以不打算挣扎了，目前top域名挺便宜的hh。 顺便可以看看这个科普下cn域名的危害","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"https://sephiroth1s.top/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://sephiroth1s.top/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"存档","slug":"存档","permalink":"https://sephiroth1s.top/tags/%E5%AD%98%E6%A1%A3/"}]},{"title":"Parrot 窗口最大化最小化按钮顺序修改","slug":"Parrot 窗口最大化最小化按钮顺序修改/Parrot 窗口最大化最小化按钮顺序修改","date":"2018-09-17T16:00:00.000Z","updated":"2020-10-12T17:14:55.105Z","comments":true,"path":"2018-09-18-linux-maximize-minimize-order/","link":"","permalink":"https://sephiroth1s.top/2018-09-18-linux-maximize-minimize-order/","excerpt":"","text":"背景 Parrot 默认的最大化最小化的位置在左边，系统中有下图的选项可以直接修改，将这些按钮换到右边或者左边。 但是设置成右边之后再设置为左边，在我的机器上发现回到左边，最大化和最小化的位置颠倒了,如图,虽然不影响使用，但是难受啊233 解决方案 通过一波搜素发现有这几个可以用来修改设置的工具 gconf-editor dconf-editor Tweaks， Parrot 自带了 dconf-editor 所以使用它来修复一下 在终端输入 dconf-editor 在弹出的窗口搜索 button-layout ，点击搜索结果中的第一个 关闭使用默认值，在自定义值出填入 close,maximize,minimize:，这个表示在左侧按钮的顺序为 关闭 最大化 最小化。 如果想换到右边可以使用默认值，或者在自定义值出填入 menu:minimize,maximize,close，表示按钮在右侧 顺序为 最小化 最大化 关闭。 如果想要自定义别的顺序只要修改 minimize maximize close 这三个的顺序即可，其他的是用来标定在左还是在右。经过修改之后系统设置的左右设置就会无法设置只能通过 dconf-editor ，如果想恢复到系统接管，请打开使用默认值 参考链接 参考链接1 参考链接2 参考链接3","categories":[{"name":"日常填坑","slug":"日常填坑","permalink":"https://sephiroth1s.top/categories/%E6%97%A5%E5%B8%B8%E5%A1%AB%E5%9D%91/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sephiroth1s.top/tags/Linux/"}]},{"title":"Parrot下 pycharm 配置 pyqt5 开发环境","slug":"Parrot下pycharm配置pyqt5开发环境/Parrot下pycharm配置pyqt5开发环境","date":"2018-09-14T16:00:00.000Z","updated":"2020-10-12T17:15:13.967Z","comments":true,"path":"2018-09-15-linux-pycharm-pyqt5/","link":"","permalink":"https://sephiroth1s.top/2018-09-15-linux-pycharm-pyqt5/","excerpt":"","text":"前言（可直接跳过） 之前用 QT 写过串口助手，发现这玩意真TM好用，还跨平台，但是有时候有些东西还是要自己来实现，刚好会点 python 就发现了 PYQT 这个有趣的玩意，结合了 python 和 QT 的优点，可以偷懒了:) 在使用过过程中使用过两个开发环境 Eric6 和 pycharm,简答描述一下前者的使用体验，是专门用于 PYQT 开发的 IDE，本身也是 python 开发的，可以直接调用 QtDesigner 并且可以将 ui 文件直接转换成 py 代码，还有针对 QT 的信号和槽等机制的一键生成代码段的功能，整体界面跟 eclipse 类似，但是有个缺点，代码补全效果弱爆，甚至可能崩溃，在用过 pycharm 之后更是明显感觉到差距。（没有代码补全完全活不下去了）。 ps:以下内容 QT 均指 C++ 版本的，PYQT 均指 python 版本的 1.PYQT 环境配置 由于 Parrot 自带的 python3 没有 pip 需要装一下，执行以下命令1sudo apt-get install python3-pip PYQT 对于 python3 有官方的支持，对 python2 没有官方的支持，如果一定要在 2 的环境下可以尝试安装 python-qt5，本文使用的是 python3环境，执行以下命令安装 pyqt51pip3 install pyqt5 Parrot 自带 QT5 环境，但针对 C++ 环境，所以可用的只有 QtDesigner，我们还需要将 ui 文件转换为py代码的工具 pyuic 和其他 QT 附属工具的 py 版本，执行以下命令进行安装1sudo apt-get install qttools5-dev-tools 2.pycharm 配置 为了调用 PYQT 的工具，我们需要使用 pycharm 的外部扩展工具功能，具体位置为：File –&gt; setting –&gt; Tools –&gt; External Tools 主要配置的参数有三个 Program，Arguments,Wroking directory 下图是 QtDesigner 的配置，除了 Program 选项其他选项也可以不设置。下面两个可以选填一个到 Program 选项里12&#x2F;usr&#x2F;lib&#x2F;qt5&#x2F;bin&#x2F;designer （前面安装的工具集）&#x2F;usr&#x2F;bin&#x2F;designer （系统环境 QT 带的） 配置 pyuic，将 ui 文件转换为 py 代码，在工具配置界面填入如下内容123Program:&#x2F;usr&#x2F;lib&#x2F;python3Arguments:-m PyQt5.uic.pyuic $FileName$ -xo $FileNameWithoutExtension$.pyWroking directory:$FileDir$ 这里顺便提一下 -xo 参数如果去掉 x 参数生成的 py 代码就会缺少下面这一段 至此基本配置完毕，附上运行效果图参考链接 官方文档结语 pycharm 真好用","categories":[{"name":"日常填坑","slug":"日常填坑","permalink":"https://sephiroth1s.top/categories/%E6%97%A5%E5%B8%B8%E5%A1%AB%E5%9D%91/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sephiroth1s.top/tags/Linux/"},{"name":"Python","slug":"Python","permalink":"https://sephiroth1s.top/tags/Python/"}]},{"title":"Virtualbox 开机进入UEFI shell","slug":"Virtualbox 开机进入UEFI shell/Virtualbox 开机进入UEFI shell","date":"2018-05-27T16:00:00.000Z","updated":"2020-10-12T17:16:04.715Z","comments":true,"path":"2018-05-28-virtualbox-uefi-shell/","link":"","permalink":"https://sephiroth1s.top/2018-05-28-virtualbox-uefi-shell/","excerpt":"","text":"背景 好久之前在虚拟机里面装的 parrot 发现启动之后没有进入引导界面，而是到了下面的奇怪界面。按英文就是也就是 UEFI shell 界面 。一直想修复一下又比较懒，用实机比较多，毕竟虚拟机性能还是差点，刚好今天有空。PS：当时装的好像是是 parrot 3.7 ，而且其他小伙伴貌似也没翻车。。 原因分析 貌似 Virtualbox 用 EFI 引导方式安装的系统 有时候就会识别不到 系统EFI启动项 即grubx64.efi 这个文件没有成功载入。 简单启动 在 UEFI shell 下直接输入如下命令就可以回到正常的引导步骤，不过治标不治本，再次重启还是会识别不到。下面提供两种方案PS: 1.之前我都是一点点 cd 到 efi文件的位置的 (￣,￣ ) 因为要找在FS0: 还是 FS1: ,下面这个命令就直接不用找了 --2.斜杠别弄反 是 \\ 1\\EFI\\parrot\\grubx64.efi 方案一 按照 简单启动 进入系统之后输入如下两条命令12sudo mkdir &#x2F;boot&#x2F;efi&#x2F;EFI&#x2F;bootsudo cp &#x2F;boot&#x2F;efi&#x2F;EFI&#x2F;parrot&#x2F;grubx64.efi &#x2F;boot&#x2F;efi&#x2F;EFI&#x2F;boot&#x2F;bootx64.efi PS：/boot 文件夹再往里就需要root用户才能看了，不过上面的两步操作可以正常操作，如果想确定有没有修改成功，请切换到root用户 方案二 直接在 UEFI shell 界面进行操作，省去了进去系统的步骤。这里有个前提，需要知道自己EFI文件夹在 FS0: 还是 FS1:，emmm一个个试吧，没有找到合适的命令一下子显示。具体参照下图，找到之后执行如下命令 12mkdir \\EFI\\bootcp \\EFI\\parrot\\grubx64.efi \\EFI\\boot\\bootx64.efi 执行成功如下图，再输入 exit 回车再回车就正常引导啦。(｡･∀･)ﾉﾞ 结果分析 可以看到其实只是做了个文件复制而已， EFI/boot/bootx64.efi 这个文件夹是 VirtualBox 的默认文件夹，如果正常启动没有找到或者识别，就会自动选用这个。最后附上成功引导的截图 参考链接 UEFI boot in virtualbox","categories":[{"name":"日常填坑","slug":"日常填坑","permalink":"https://sephiroth1s.top/categories/%E6%97%A5%E5%B8%B8%E5%A1%AB%E5%9D%91/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sephiroth1s.top/tags/Linux/"}]},{"title":"记一次 win10 更新导致的双系统 grub 引导丢失（无法进入linux）","slug":"记一次 win10 更新导致的双系统 grub 引导丢失（无法进入linux）/记一次 win10 更新导致的双系统 grub 引导丢失（无法进入linux）","date":"2018-04-15T16:00:00.000Z","updated":"2020-10-12T17:09:46.668Z","comments":true,"path":"2018-04-16-win10-update-break-gurb/","link":"","permalink":"https://sephiroth1s.top/2018-04-16-win10-update-break-gurb/","excerpt":"","text":"闲话 本来这两天折腾好爱国渠道，想到 parrot 还没配置，，，然而发现每次都进的 win10，之前一直没留意-_-||，只是感觉少了点什么。在 bios 里面设置了一下也是直接闪退，然后转 win10启动了 LIVE 进入 先 从 LIVE 进入系统看下资料还在不在，看了下 boot 目录下面 grub 下没有看到明显的文件缺失，EFI 下面变成空的了。 所以重新安装一下 grub 缺的文件就装回来了吧emmm，挂载原来的 linux 分区。 方案一 LIVE 进入，先查看一下 linux 的系统分区,如下图所示我的系统在 sda7 1sudo fdisk -l 挂载分区 1sudo mount &#x2F;dev&#x2F;sda7 &#x2F;mnt 暂时挂载需要用到的目录 123sudo mount --bind &#x2F;dev &#x2F;mnt&#x2F;devsudo mount --bind &#x2F;proc &#x2F;mnt&#x2F;procsudo mount --bind &#x2F;sys &#x2F;mnt&#x2F;sys 修改程序执行的 参考根目录位置为原系统目录 1sudo chroot &#x2F;mnt 安装修复 grub 12sudo grub-install &#x2F;dev&#x2F;sda7sduo update-grub 退出环境&amp;卸载挂载的目录和设备 12345exitsudo umount &#x2F;mnt&#x2F;devsudo umount &#x2F;mnt&#x2F;procsudo umount &#x2F;mnt&#x2F;syssudo umount &#x2F;mount 重启收工 *ps: *在执行 步骤5 有可能遇到找不到文件问题 缺少EFI等，导致安装失败，所以我换了方案二 方案二（推荐） 从 LIVE u盘选择界面按 c 进入 grub 命令行 输入 set 可以查看 当前引导是哪个分区 123cmdpath&#x3D;(hd0,gpt1)&#x2F;EFI&#x2F;parrotprefix&#x3D;(hd0,gpt1)&#x2F;boot&#x2F;grubroot&#x3D;hd0,gpt1 主要看上面这三个其他可以忽略。(hd0,gpt1)这个部分是第一块硬盘的第一个分区，即u盘。 输入 ls 显示类似如下信息 1(hd0,gpt1) (hd1,gpt2) (hd1,gpt3) (hd1,gpt4) (hd1,gpt5) (hd1,gpt6) (hd1,gpt7)...... 找到你的 linux 分区 如果不知道具体是哪个分区可以使用 ls (hd1,gpt7)/boot/grub 一个个试，当出现一堆文件就是在这个分区了。 ps: 之前进入 live 也可以直接使用 sudo fdisk -l 查看具体位置只不过名字不太一样，比如我的是 sdb7 则对应 （hd1,gpt7） 使用 set 把当前的引导换到原来那个系统路径 12set root&#x3D;hd1,gpt7set prefix&#x3D;(hd1,gpt7)&#x2F;boot&#x2F;grub 再用 set 看一下这两项是不是已经改好了，因为前面的两句输入错的有人不会有回显，会创建新的项目 （我不知道我为什么知道( ╯-_-)╯┴—┴ ) 确认之后 输入下面两条命令，不出意外应该进到系统了 12insmod &#x2F;boot&#x2F;grub&#x2F;normalnormal 成功的请直接看跳到步骤7，一些奇怪的症状（希望有人补充），下面的是我的情况 情况1： 输入 normal 出现载入界面 然后报错 回到 live 选择界面 解决方案1： 往下翻一页发现多了一页，刚好看到有 parrot 回车成功进入系统。 恩貌似是挂载成功了，但是启动还是引导有问题。可惜无法复现测试一下了。 待添加 重新安装修复引导 12sudo grub-install &#x2F;dev&#x2F;sda7sudo update-grub ps: 注意这里我已经吧 u 盘拔掉了，所以不是 sdb7 了 如下图，还好留了张图 重启收工 参考链接：https://www.cnblogs.com/zhaojk2010/p/4591838.htmlhttps://blog.csdn.net/weixin_39772481/article/details/79212364[ArchWiki-GRUB][3][3]: https://wiki.archlinux.org/index.php/GRUB_(简体中文) 话说 Arch 的 wiki 果然名不虚传啊","categories":[{"name":"日常填坑","slug":"日常填坑","permalink":"https://sephiroth1s.top/categories/%E6%97%A5%E5%B8%B8%E5%A1%AB%E5%9D%91/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sephiroth1s.top/tags/Linux/"}]},{"title":"使用Github Page 搭建hexo博客无法部署到GitHub（非空格问题）","slug":"使用Github Page 搭建hexo博客无法部署到GitHub（非空格问题）/使用Github Page 搭建hexo博客无法部署到GitHub（非空格问题）","date":"2018-02-09T16:00:00.000Z","updated":"2020-10-12T17:11:59.175Z","comments":true,"path":"2018-02-10-no-space-question-about-yml/","link":"","permalink":"https://sephiroth1s.top/2018-02-10-no-space-question-about-yml/","excerpt":"","text":"环境&amp;背景 系统：win10 x64 Git 版本：2.16.1 Node.js 版本：v7.6.0 //这个是我好久之前啥也不懂的时候装的 官网居然已经8.4了. [Node.js 中文网](Node.js 中文网)这个看着更简洁一点，不过貌似是个人站点 Hexo 版本：3.5.0 问题&amp;解决方案问题1npm install hexo-deployer-git --save执行该命令后出现如下提示 123456npm WARN deprecated swig@1.4.2: This package is no longer maintainedhexo-site@0.0.0 C:\\blog&#96;-- hexo-deployer-git@0.3.1npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules\\chokidar\\node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;) 我在 https://stackoverflow.com 找到类似的问题。 简单描述就是，这个包已经废弃，在别的地方有补充，所以只是一个警告不用担心，实际我的测试结果也是这样，保险起见确保执行过一次这个命令 不过只要看见这样的 hexo-deployer-git@0.3.1 的字眼就是已经安装好了 按照我收集的答案，这个插件貌似又集成回来了。hexo 3.0 的时候是分开的 问题2 部署到 GitHub，输入 hexo d 无提示，部署无效 deploy: 部分设置正确，有一个半角空格！！！（网上大多都是这个，然并卵） debug 时间 hexo旧版本 需要将 type: 后面修改为 github ，如下图，（抱着一线希望试试） 1remote: error: GH007: Your push would publish a private email address. 出现上面这个错误，终于有个错了，应该有救 解决方法如下12在GitHub的你账号网页上右上角，个人的登录退出的位置，找到setting：setting-&gt;emails-&gt;Keep my email address private，把这一项去掉勾选即可。 别忘了吧 type 改回 git 回顾分析貌似是因为我把邮箱隐藏了，git找不到，这个属于git的错误，但不是 hexo，所以自然前面执行hexo命令的时候没有提示PS:貌似是我当时注册的时候为了保护隐私自己弄了两个邮箱，，，隐藏了git 上传的那个(￣ε(#￣) 希望能够帮助到遇到类似问题的人，之前查到的都是让加个空格的问题贼郁闷（感觉不会有人遇到跟我一样的坑了，这个概率，，，） 不知不觉写了这么多，本来还想顺便写一下 hexo github 搭建博客的流程，改天再说吧(￣_,￣ )","categories":[{"name":"基础知识","slug":"基础知识","permalink":"https://sephiroth1s.top/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sephiroth1s.top/tags/Linux/"},{"name":"博客","slug":"博客","permalink":"https://sephiroth1s.top/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"Hexo","permalink":"https://sephiroth1s.top/tags/Hexo/"}]},{"title":"常用软件以及附加插件记录（长期不定期更新）","slug":"常用软件以及附加插件记录（长期不定期更新）/常用软件以及附加插件记录（长期不定期更新）","date":"2018-02-04T16:00:00.000Z","updated":"2020-10-12T17:17:23.007Z","comments":true,"path":"2018-02-05-my-favorite-software/","link":"","permalink":"https://sephiroth1s.top/2018-02-05-my-favorite-software/","excerpt":"PS:主要怕忘记..网上估计我肯定会忘干净，所以记录在这里，就算是备份吧","text":"PS:主要怕忘记..网上估计我肯定会忘干净，所以记录在这里，就算是备份吧 Linux Atom 插件 Markdown Image Paste //图片粘贴 Markdown Scroll Sync //同步滚动 Simplified Chinese Menu //汉化插件 Markdown Table Editor //表格编辑美化 Markdown Themeable Pdf ///pdf 导出 language-markdown //代码着色，片段生成 Pycharm Windows Wise System Monitor 轻量系统资源监视器:硬件信息查看，CPU和内存占用率，硬件温度，及网络流量，管理当前正在运行的进程等，还有一个简洁的悬浮窗。 貌似还有中文站点智慧清理，他们家其他的产品好像也不错，占用的资源也少，有空看看 Revo Uninstaller Pro 功能强大的软件卸载和垃圾清理软件，有猎人模式一键点击卸载、停止、删除应用程序；附带很多实用工具,如自动启动管理员、垃圾文件清理器、Windows工具、浏览清理器、Office 清理器、Windows清理器、形迹移除器、永久性删除工具和备份管理员功能! 官方提供 Revo Uninstaller Free 免费但是功能少的 Free 版本，和30天免费试用的付费的 Pro 版本 我用的破解版 Revo Uninstaller Pro 破解版密码: 9125","categories":[{"name":"日常填坑","slug":"日常填坑","permalink":"https://sephiroth1s.top/categories/%E6%97%A5%E5%B8%B8%E5%A1%AB%E5%9D%91/"}],"tags":[{"name":"存档","slug":"存档","permalink":"https://sephiroth1s.top/tags/%E5%AD%98%E6%A1%A3/"}]},{"title":"Linux 下.desktop 文件编写","slug":"linux 下.desktop文件编写/the desktop","date":"2018-02-02T16:00:00.000Z","updated":"2020-10-12T17:13:17.420Z","comments":true,"path":"2018-02-03-linux-desktop-file/","link":"","permalink":"https://sephiroth1s.top/2018-02-03-linux-desktop-file/","excerpt":"","text":"语法简介 关键词 含义 必选 [Desktop Entry] 文件头标签 √ Encoding 编码 x Name 应用名称 √ Name[xx] 不同语言的应用名称 x GenericName 程序通用名称 x Comment 描述 x Exec 执行的命令 √ Icon 图标路径 x Type 启动器类型 √ Categories 应用的类型 x Version 快捷方式版本 x Terminal 是否使用终端 x 使用方式以创建Pycharm快捷方式为例（顺便复习一下vim） 创建以.Dsektop为后缀的文件 1sudo vim Pycharm.desktop 按i输入以下内容 1234567891011121314151617181920212223[Desktop Entry]Type&#x3D;Application#desktop的类型，常见有Application和LinkEncoding&#x3D;UTF-8Version&#x3D;1.0Name&#x3D;PycharmName[zh_CN]&#x3D;Pycharm开发环境#快捷方式名称，可根据系统语言匹配，优先匹配更细化语言标识GenericName&#x3D;Pycharm3Comment&#x3D;Pycharm3:The Python IDE#程序描述，鼠标经过时的名称提示，也可国际化Exec&#x3D;sh &#x2F;yourpath&#x2F;pycharm&#x2F;bin&#x2F;pycharm.sh#实际执行的命令Icon&#x3D;&#x2F;yourpath&#x2F;pycharm&#x2F;bin&#x2F;pycharm.pngTerminal&#x3D;false#是否使用终端，默认为false，可选Categories&#x3D;Development;#菜单分类所属，可以确定该快捷方式位置，可选 输入完成按Esc,输入:wq 双击文件测试是否可以启动，无法启动则文件编写有问题或者权限不足 移动到/usr/share/applications/目录下 完成如下图： Tips: vim 将系统剪贴板内容粘贴到 vim 中命令为&quot;+p 将 vim 内容粘贴到系统剪贴板&quot;+nY，其中 n 为往下 n 行，Y 为大写","categories":[{"name":"日常填坑","slug":"日常填坑","permalink":"https://sephiroth1s.top/categories/%E6%97%A5%E5%B8%B8%E5%A1%AB%E5%9D%91/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://sephiroth1s.top/tags/Linux/"}]},{"title":"推挽输出与开漏输出","slug":"推挽输出与开漏输出/推挽输出与开漏输出","date":"2018-01-27T16:00:00.000Z","updated":"2020-10-12T17:12:37.729Z","comments":true,"path":"2018-01-28-Push-Pull-and-Open-Drain/","link":"","permalink":"https://sephiroth1s.top/2018-01-28-Push-Pull-and-Open-Drain/","excerpt":"","text":"推挽输出(Push-Pull)​ 原理：推挽放大器电路中，一只三极管工作在导通、放大状态时，另一只三极管处于截止状态，当输入信号变化到另一个半周后，原先导通、放大的三极管进入截止，而原先截止的三极管进入导通、放大状态，两只三极管在不断地交替导通放大和截止变化，所以称为推挽放大器。 简单理解：如上图所示三极管的小箭头就是导通时的电流方向，Vout与V+或V-构成回路，Vin只负责开关。 可以吸电流也可以灌电流，相对于开漏，输出电平取决于IC电源。然而，一条总线上只能有一个推挽输出。 用途：驱动应用中，驱动LED、蜂鸣器，USART_TX、USART_CK、USART_RTS、MOSI、SPI主模式SCK、CAN_TX等需要较强驱动能力的场合 开漏输出(Open-Drain) 开漏输出就是不输出电压，低电平时接地，高电平时不接地。如果外接上拉电阻，则在输出高电平时电压会拉到上拉电阻的电源电压。这种方式适合在连接的外设电压比单片机电压低的时候。 具备输出低电平能力，无外接电路则无输出高电平能力即悬空 典型的集电极开路电路如图所示。电路中右侧的三极管集电极什么都不接，所以叫做集电极开路，左侧的三极管用于反相作用，即左侧输入“0”时左侧三极管截止，VCC通过电阻加到右侧三极管基极，右侧三极管导通，右侧输出端连接到地，输出“0”。 用途：电平转换，加上拉电阻做驱动器，实现”线与“逻辑(I2C等接口总线应用中)，利用外电路提高驱动能力，利用上拉电阻提供高电平，没有上拉电阻只能输出低电平。 简单对比 推挽输出 开漏输出 高电平驱动能力 强 由外部上拉电阻提供 低电平驱动能力 强 强 电平跳变速度 快 由外部上拉电阻决定，电阻越小，反应越快，功耗越大 线与功能 不支持 支持 电平转换 不支持 支持 PS: 参考链接结合里面的内容做了些个人理解，麻烦的话看图吧(ˉ▽￣～)~秒懂","categories":[{"name":"基础知识","slug":"基础知识","permalink":"https://sephiroth1s.top/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}],"tags":[{"name":"电子基础","slug":"电子基础","permalink":"https://sephiroth1s.top/tags/%E7%94%B5%E5%AD%90%E5%9F%BA%E7%A1%80/"}]},{"title":"python2.x与python3.x中input的区别","slug":"python2.x 与python3.x 中intput区别/python2.x 与python3.x 中intput区别","date":"2017-03-15T16:00:00.000Z","updated":"2020-10-12T17:15:37.728Z","comments":true,"path":"2017-03-16-python2-python3-input/","link":"","permalink":"https://sephiroth1s.top/2017-03-16-python2-python3-input/","excerpt":"","text":"input与raw_input首先我们我们先聊聊python2和python3使用input中需要注意到的事情在python2.x中 input可以直接接受数字，并返回数字 input不可以直接接受字符／字符串 对于input需要使用合法的python表达式才能读入字符串／字符 input会把你输入的内容当做python处理，这样会产生安全问题， 最好使用raw＿input！ raw＿input可以直接读入数字或者字符／字符串，并返回字符串 input() 本质上还是使用 raw_input() 来实现的，只是调用完raw_input() 之 后再调用 eval() 函数，所以，你甚至可以将表达式作为 input() 的参数，并 且它会计算表达式的值并返回（这段话只要理解前半部分就好了，反正现在 博主也不懂W(￣_￣)W 在python3.x中 整合了input和raw＿input没有raw＿input input返回的结果均为字符串 ———————————————————————–这是一条分割线(～￣▽￣)～———————————————————————– 下面是相对应的测试代码python2.x 1234567891011121314151617181. &gt;&gt;&gt; user=raw_input(“please input:”)2. please input:wei # raw_input 输入 字符串 成功3. &gt;&gt;&gt; user4. ‘wei’5. &gt;&gt;&gt; user=raw_input(“please input:”)6. please input:１１１7. &gt;&gt;&gt; user8. ‘111’9. &gt;&gt;&gt; user=input(“please input:”)10. please input:wei # input 输入字符串 失败11. Traceback (most recent call last\\):12. File “&lt;stdin&gt;”, line 1, in ?13. File “&lt;string&gt;”, line 0, in ?14. NameError: name ‘wei’ is not defined15. user=input(“please input:”)16. please input:”wei” # input 输入字符串17. &gt;&gt;&gt; user18. &gt;&gt;&gt;’wei’ python3.x 123456789101119. &gt;&gt;&gt; user=raw_input(“please input:”) #没有了raw_input20. Traceback (most recent call last):21. File&lt;stdin&gt;”, line 1, in &lt;module&gt;22. NameError: name ‘raw_input’ is not defined23. &gt;&gt;&gt; user=input(“please input:”) please input:wei24. &gt;&gt;&gt; user25. ‘wei’26. &gt;&gt;&gt; user=input(“please input:”) #input的输出结果都是作为字符串27. please input:12328. &gt;&gt;&gt; user29. ‘123’","categories":[{"name":"基础知识","slug":"基础知识","permalink":"https://sephiroth1s.top/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://sephiroth1s.top/tags/Python/"}]},{"title":"Hello world!","slug":"hello-world/hello-world","date":"2017-01-23T16:00:00.000Z","updated":"2020-10-12T17:12:54.147Z","comments":true,"path":"2017-01-24-hello-world/","link":"","permalink":"https://sephiroth1s.top/2017-01-24-hello-world/","excerpt":"使用hello world作为第一篇博客，是因为博主刚好看到既然能叫它说话，就能让他做任何事！ –来自《梦断代码》","text":"使用hello world作为第一篇博客，是因为博主刚好看到既然能叫它说话，就能让他做任何事！ –来自《梦断代码》 （感觉英语逼格更高点，但是博主看的是中文版，其实是懒的找-_-||）","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"https://sephiroth1s.top/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"}],"tags":[{"name":"hello world","slug":"hello-world","permalink":"https://sephiroth1s.top/tags/hello-world/"}]}],"categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"https://sephiroth1s.top/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"},{"name":"日常填坑","slug":"日常填坑","permalink":"https://sephiroth1s.top/categories/%E6%97%A5%E5%B8%B8%E5%A1%AB%E5%9D%91/"},{"name":"基础知识","slug":"基础知识","permalink":"https://sephiroth1s.top/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://sephiroth1s.top/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"存档","slug":"存档","permalink":"https://sephiroth1s.top/tags/%E5%AD%98%E6%A1%A3/"},{"name":"Linux","slug":"Linux","permalink":"https://sephiroth1s.top/tags/Linux/"},{"name":"Python","slug":"Python","permalink":"https://sephiroth1s.top/tags/Python/"},{"name":"Hexo","slug":"Hexo","permalink":"https://sephiroth1s.top/tags/Hexo/"},{"name":"电子基础","slug":"电子基础","permalink":"https://sephiroth1s.top/tags/%E7%94%B5%E5%AD%90%E5%9F%BA%E7%A1%80/"},{"name":"hello world","slug":"hello-world","permalink":"https://sephiroth1s.top/tags/hello-world/"}]}